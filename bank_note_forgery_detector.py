# -*- coding: utf-8 -*-
"""Bank-Note-Forgery Detector

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Psatjv7rX3H4ABgjL2k7mziEiHMZrDkQ
"""

#Importing all the necessary libararies 
import numpy as np 
from numpy import genfromtxt #to convert txt file contents to a numpy array 
from sklearn.model_selection import  train_test_split # to divide the dataset into training and testing parts
from keras.models import Sequential #To build the neural network 
from keras.layers import Dense #To add layers to the neural network 
from google.colab import drive #To upload files from desktop to google colab
from sklearn.metrics import confusion_matrix,classification_report
drive.mount('/content/drive')

#Uploading the file
from google.colab import files
uploaded = files.upload()

#Storing th file in an object and converting it to an np.array
data = uploaded['bank_note_data.txt']
data = genfromtxt('bank_note_data.txt',delimiter=',')
data

#Getting features from the data 
features =data[:,:4]
features

#Getting labels from the data 
labels = data[:,4]
labels

#Usual mathematical notation in ML
X = features
y = labels

#Dividing into testing and training sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

X_train
len(X)

y_train
len(y_train)

# print(X_test.max())
# print(X_train.max())
# X_train = X_train/X_train.max()
# X_test  = X_test/X_train.max()
# print(X_test.max())
# print(X_train.max())

print(X_test.max())
print(X_train.max())

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

scaler.fit(X_train)

scaled_X_train = scaler.transform(X_train)
scaled_X_test = scaler.transform(X_test)

print(X_test.max())
print(X_train.max())

#Creating the neural network 
model = Sequential()

#Adding layers
model.add(Dense(4,input_dim = 4,activation = 'relu'))
model.add(Dense(10,activation = 'relu'))
model.add(Dense(1,activation = 'sigmoid'))

#Compiling the layers
model.compile(loss = 'binary_crossentropy',optimizer = 'adam',metrics = ['accuracy'])

#Training the model with training data
model.fit(scaled_X_train,y_train,epochs = 50,verbose = 2)

#Storong the predicted values of the testing data
predictions = model.predict_classes(scaled_X_test)

#Confusion matrix giving false and true positives and negatives
confusion_matrix(y_test,predictions)

#Printing the classificatiion report
print(classification_report(y_test,predictions))